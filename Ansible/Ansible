which order ansible will consider cfg file
1. environment variable
2. current directory
3. home directory

default loc --  /etc/ansible/ansible.cfg

======================variables====================

string
number
boolean
list
dictionary--> {{user.name}} {{user.password}}

================variable precedance===========

group
host
play

--------------------------------------------------------------------

cat inventory
localhost ansible_connection=local nameserver_ip=8.8.8.8 snmp_port=160-161
node01 ansible_host=node01 ansible_ssh_pass=caleston123
node02 ansible_host=node02 ansible_ssh_pass=caleston123
[web_nodes]
node01
node02

[all:vars]
app_list=['vim', 'sqlite', 'jq']
user_details={'username': 'admin', 'password': 'secret_pass', 'email': 'admin@example.com'}



-----------

cat playbook.yaml
---
- hosts: localhost

  vars:
    car_model: 'BMW M3'
    country_name: USA
    title: 'Systems Engineer'

  tasks:
    - command: 'echo "My car is {{car_model}}"'
    - command: 'echo "I live in the {{country_name}}"'
    - command: 'echo "I work as a {{title}}"'

-----------------------------------------------------

cat app_install.yaml
---
- hosts: all
  become: yes
  tasks:
    - name: Install applications
      yum:
        name: "{{ item }}"
        state: present
      with_items:
        - "{{ app_list }}"


-----------------------------user_setup.yaml


- hosts: all
  become: yes
  tasks:
    - name: Set up user
      user:
        name: "{{ user_details.username }}"
        password: "{{ user_details.password }}"
        comment: "{{ user_details.email }}"
        state: present

=================================================================================
Register

when we want to result one task into another, use Regisger
=================================================================================

================================================================================
ansible-playbook playbook.yml
==========================================================================

verify playbooks

ansible-playbook playbook.yml --check

check and diff--------------


hosts: webservers
tasks:
name: Ensure the configuration line is present lineinfile:
path: /etc/nginx/nginx.conf
line: 'client_max_body_size 100M; '
become: yes

ansible-playbook configuration.yml --check --diff


-----------syntax check-------------

ansible-playbook playbook.yml --syntax-check

===================linting================

ansible-lint example.yml

===============================

---
- name: 'Execute a command to display hosts file on localhost'
  hosts: localhost
  become: yes
  tasks:
     - name: 'Task to display hosts file'
       command: 'cat /etc/hosts'

====================================================================

---
- name: 'Execute two commands on node01'
  hosts: node01
  become: yes
  tasks:
    - name: 'Execute a date command'
      command: date
    - name: 'Task to display hosts file on node01'
      command: 'cat /etc/hosts'
- name: 'Execute a command on node02'
  hosts: node02
  become: yes
  tasks:
     - name: 'Task to display hosts file on node02'
       command: 'cat /etc/hosts'

==============and  or operator=============

---
- name: Install NGINX
  hosts: all
  tasks:
  - name: Install NGINX on Debian
    apt:
      name: nginx
      state: present
    when:
ansible_os_family == "Debian" and
ansible_distribution_version == "16.04"

-name: Install NGINX on Redhat
yum:
name: nginx
state: present
when: ansible_os_family "RedHat" or
ansible_os_family == "SUSE"

=============================================Modules==========

system
command
files
database
cloud 
windows
more...

===============Handlers=======
Sometimes you want a task to run only when a change is made on a machine. For example, you may want to restart a service if a task updates the configuration of that service, but not if the configuration is unchanged. Ansible uses handlers to address this use case. Handlers are tasks that only run when notified.

---
- name: Verify apache installation
  hosts: webservers
  vars:
    http_port: 80
    max_clients: 200
  remote_user: root
  tasks:
    - name: Ensure apache is at the latest version
      ansible.builtin.yum:
        name: httpd
        state: latest

    - name: Write the apache config file
      ansible.builtin.template:
        src: /srv/httpd.j2
        dest: /etc/httpd.conf
      notify:
        - Restart apache

    - name: Ensure apache is running
      ansible.builtin.service:
        name: httpd
        state: started

  handlers:
    - name: Restart apache
      ansible.builtin.service:
        name: httpd
        state: restarted
=====================================================================
WHEN
---
-  name: 'Execute a script on all web server nodes'
   hosts: all
   become: yes
   tasks:
     -  service: 'name=nginx state=started'
        when: 'ansible_host=="node02"'

--------------------------------------

---
- name: 'Am I an Adult or a Child?'
  hosts: localhost
  vars:
    age: 25
  tasks:
    - name: I am a Child
      command: 'echo "I am a Child"'
      when: 'age < 18'
    - name: I am an Adult
      command: 'echo "I am an Adult"'
      when: 'age >= 18'
--------------------------------------------
---
The first task in the playbook is using the shell module to display the existing contents of /etc/resolv.conf file and the second one is adding a new line containing the name server details into the file. However, when this playbook is run multiple times, it keeps adding new entries of same line into the resolv.conf file. To resolve this issue, update the playbook as per details mentioned below.


Add a register directive to store the output of the first task to a variable called command_output

Then add a conditional to the second task to check if the output already contains the name server (10.0.250.10). Use command_output.stdout.find(<IP>) == -1

- name: 'Add name server entry if not already entered'
  hosts: localhost
  become: yes
  tasks:
    - shell: 'cat /etc/resolv.conf'
      register: command_output
    - shell: 'echo "nameserver 10.0.250.10" >> /etc/resolv.conf'
      when: 'command_output.stdout.find("10.0.250.10") == -1'

============================WITH========================================


---
-  name: 'Print list of fruits'
   hosts: localhost
   vars:
     fruits:
       - Apple
       - Banana
       - Grapes
       - Orange
   tasks:
     - command: 'echo "{{ item }}"'
       with_items: '{{ fruits }}'
-------------------------------------------------------------

---
- name: 'Install required packages'
  hosts: localhost
  become: yes
  vars:
    packages:
      - httpd
      - make
      - vim
  tasks:
    - yum:
        name: '{{ item }}'
        state: present
      with_items: '{{ packages }}'


=======================================================================
---
- name: 'hosts'
  hosts: all
  become: yes
  tasks:
    - name: 'Execute a script'
      script: '/tmp/install_script.sh'

--------------------------------------------------
---
- name: 'hosts'
  hosts: all
  become: yes
  tasks:
    - name: 'Execute a script'
      script: '/tmp/install_script.sh'
    - name: 'Start httpd service'
      service:
        name: 'httpd'
        state: 'started'
---------------------------------------

---
- name: 'hosts'
  hosts: all
  become: yes
  tasks:
    - name: 'Execute a script'
      script: '/tmp/install_script.sh'
    - name: 'Start httpd service'
      service:
        name: 'httpd'
        state: 'started'
    - name: "Create or update index.html file."
      lineinfile:
        path: /var/www/html/index.html
        line: "Welcome to ansible-beginning course"
        create: true
    - name: 'Create a new user'
      user:
        name: 'web_user'
        uid: 1040
        group: 'developers'

=======================collections======================================
collections:
  - name: community.general
    version: '1.0.0'
  - name: amazon.aws
    version: '1.2.1'


---You can use the following command to install all collections listed in the requirements.yml file.

cd playbooks/
ansible-galaxy collection install -r requirements.yml

==================================template============

The student name is DAVID

The student name is {{ student | upper }}

-----------------------------------
vi /home/bob/playbooks/replace/templates/name.txt.j2

{{ dialogue | replace('Bourne', 'Bond') }}

Edit the /home/bob/playbooks/replace/playbook.yml playbook.

---
- hosts: localhost
  connection: local
  vars:
    dialogue: "The name is Bourne, James Bourne!"
  tasks:
    - template:
        src: name.txt.j2
        dest: /tmp/name.txt

==========================File Modeule======================

---
- hosts: node01
  become: true
  tasks:
    - name: Creating blog.txt file
      file:
        path: /opt/news/blog.txt
        state: touch
        group: sam

- hosts: node02
  become: true
  tasks:
    - name: Creating story.txt file
      file:
        path: /opt/news/story.txt
        state: touch
        owner: sam

===================copy module=======

---
- hosts: node01
  become: true
  tasks:
    - name: create a file
      copy:
        dest: /opt/file.txt
        content: "This file is created by Ansible!"

----------

---
- hosts: all
  become: true
  tasks:
    - copy:
        src:  /usr/src/blog/index.html
        dest: /opt/blog
        remote_src: yes

===================replace================

---
- hosts: node01
  become: true
  tasks:
    - replace:
        path: /opt/music/blog.txt
        regexp: 'Kodekloud'
        replace: 'Ansible'

- hosts: node02
  become: true
  tasks:
    - replace:
        path: /opt/music/story.txt
        regexp: 'Ansible'
        replace: 'Kodekloud'


===============when==========================


---
- name: 'Am I a Banana or not?'
  hosts: localhost
  connection: local
  vars:
    fruit: banana
  tasks:
    - command: 'echo "I am a Banana"'
      when: fruit == "banana"

    - command: 'echo "I am not a Banana"'
      when: fruit != "banana"

========================with_items===============================

---
- name: 'Print fruits'
  hosts: localhost
  connection: local
  vars:
    fruits:
      - Apple
      - Banana
      - Grapes
      - Orange
  tasks:
    - command: 'echo "{{ item }}"'
      with_items: '{{ fruits }}'

=============yum============

---
- name: 'Install the required package'
  hosts: localhost
  become: yes
  connection: local
  tasks:
    - yum: 
        name: vim-enhanced
        state: present


==============copy====================

---
- hosts: all
  become: true
  tasks:
    - name: Copy file with owner and permissions on node01
      copy:
        src: /usr/src/condition/blog.txt
        dest: /opt/condition/blog.txt
        owner: bob
        group: bob
        mode: "0640"
      when: inventory_hostname == "node01"

    - name: Copy file with owner and permissions on node02
      copy:
        src: /usr/src/condition/story.txt
        dest: /opt/condition/story.txt
        owner: sam
        group: sam
        mode: "0400"
      when: inventory_hostname == "node02"


======================lineinfile====================
---
- hosts: node01
  become: true
  tasks:
  - lineinfile:
      path: /var/www/html/index.html
      line: 'Welcome to KodeKloud Labs!'
      state: present
      insertbefore: BOF

===============yum and service=====

---
- hosts: all
  become: true
  tasks:
  - name: Install httpd package
    yum: name=vsftpd state=installed

  - name: Start service
    service:
      name: vsftpd
      state: started

=====================archive=======================

---
- hosts: all
  become: true
  tasks:
  - name: Create an archive demo.tar.gz
    archive:
      path: /usr/src/ecommerce/
      dest: /opt/ecommerce/demo.tar.gz


===========ansible galaxy================

ansible-galaxy install geerlingguy.nodejs -p /home/bob/playbooks/roles


--------------->
cd /home/bob/playbooks/roles/
ansible-galaxy init package
vi /home/bob/playbooks/roles/package/tasks/main.yml


---
# tasks file for nginx
- name: Install Nginx
  ansible.builtin.package:
    name: nginx 
    state: latest
- name: Start Nginx Service
  ansible.builtin.service:
    name: nginx 
    state: started

Now modify the /home/bob/playbooks/role.yml playbook so that it looks like as below:
---
- hosts: node01
  become: true
  roles:
    - roles/package


