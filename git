info
You can list the changed files as well using the --name-only option with the git log command

Run the command git log --name-only

To view all the branches- both local and remote - run the git branch -a command.

The remote branches have the prefix remotes

git fetch -- to pull all changes from remote repo to local
bu in pull we need fetch + merge
while in pull fetch + merge in one single command


----------------
Now that weâ€™ve fetched the origin master branch, we can update our local master branch with the latest changes made on origin/master branch.
Merge the remote master branch to local master


Syntax: git merge <other-branch>
git merge origin/master
---------
git pull origin master

------------------------merge conflicts--------------
Two users max and Sarah working on the same code with 2 different files with same name. sarah wrote first and pushed to remote.
Now Max has written the code and tries to do git push origin master, he will get error that, remote contains work that you do
not have locally. 
push rejected!
we need to pull fist
git pull origin master
pull means fetch+merge, so when git tries to do merge, it ill get merge conflicts!
to see who did it remotely, git log origin/master

open the file and correct the code
then git add and git merge,


=========================================Rebase====
sarah is writing own story in own branch, meanwhile her teammates continuously added stories and contributing to master branch.
sarah wants all the updates from master to her own branch.
if we merge master into her own branch, a new commit will get added.
another way is to rebase.

git rebase master (in sarah own branch)
this will keep sarah branch on the top of master

-------------interactive rebasing

modifying git history



she does not want multiple commits for the same story. She would like to squash all the commits into a single commit.


Run the command git rebase -i HEAD~3 to squash the last 3 commits into 1.

In the editor that opens, leave the first line as is, and change the second and third lines to use squash instead of pick. Then save the file. This way we pick the first commit and then squash the second and third commits to it.

In the next editor window that opens set the commit message to Add hare-and-tortoise story and save it.

=====================================revert and reset================

git revert will add new commit
It is useful when we want to undo changes and keep those changes in git history

git reset 
 git reset --soft Head ~1  (keep changes)
git reset --hard Head ~1   (do not keep changes)


================================stash================================

git stash

git pop

git stash list
git stash show stash@{1}   --to show the content

git stash pop stash@{1}


=====================git reflog======
to undo hard reset

git reflog will show the current git status with hard reset done.

git reset --hard 8ad5  (commit id of safe changes before hard reset)

git log only shows commit history
git reflog shows state of repository





