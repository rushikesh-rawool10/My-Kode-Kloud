jenkins
pipeline {
    agent any

    environment {
        REPO_URL = "http://git-server:3000/max/python-app.git"
        REPO_DIR = "${WORKSPACE}/python-app"  // Use Jenkins workspace directory
        BRANCH_NAME = "main"
        RUN_TESTS = "true"
        PYTHON_VERSION = "python3"
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    echo "Cloning branch: ${BRANCH_NAME} from ${REPO_URL}"
                    sh """
                        if [ -d "${REPO_DIR}" ]; then
                            cd ${REPO_DIR}
                            git reset --hard
                            git checkout ${BRANCH_NAME}
                            git pull origin ${BRANCH_NAME}
                        else
                            git clone --branch ${BRANCH_NAME} ${REPO_URL} ${REPO_DIR}
                        fi
                    """
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    echo "Installing dependencies..."
                    dir("${REPO_DIR}") {
                        sh """
                            set -e
                            ${PYTHON_VERSION} -m venv venv
                            . venv/bin/activate
                            pip install --upgrade pip
                            pip install -r requirements.txt
                        """
                    }
                }
            }
        }

        stage('Run Tests') {
            when {
                expression { return env.RUN_TESTS == "true" }
            }
            steps {
                script {
                    echo "Running tests..."
                    dir("${REPO_DIR}") {
                        sh """
                            set -e
                            . venv/bin/activate
                            pytest --junitxml=reports/test-results.xml
                        """
                    }
                }
            }
        }

        stage('Run Application') {
            steps {
                script {
                    echo "Starting Flask app for 60 seconds..."
                    dir("${REPO_DIR}") {
                        sh '''
                            set -e
                            . venv/bin/activate
                            echo "Flask app will run for 60 seconds..."
                            timeout 60s python app.py || echo "App terminated after timeout, ignoring error"
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline executed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
=====================================================
mvn clean package
Java-based projects
it generates the artifacts for Java in the form of .jar files

=============================================================

pipeline {
    agent any

    stages {

        stage('Checkout Code') {
            steps {
                script {
                    checkout scm
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    sh 'npm install'
                }
            }
        }

        stage('Run App') {
            steps {
                script {
                    // Stop any previous instance of the app
                    sh 'pkill -f "node app.js" || true'

                    // Start the app in the background and redirect logs
                    sh 'nohup node app.js > app.log 2>&1 &'

                    // Wait a few seconds to ensure the app starts
                    sleep 60

                    // Check if the app is running
                    sh 'curl http://localhost:3001 || echo "App is not responding!"'
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
        }
    }
}

=============scripted pipeline=========

node {
    try {
        stage('Checkout Code') {
            checkout scm
        }

        stage('Install Dependencies') {
            sh 'npm install'
        }

        stage('Run App') {
            // Kill any previous instance of the app
            sh 'pkill -f "node app.js" || true'

            // Start the app using nohup so it doesn't exit when the pipeline finishes
            sh 'nohup node app.js > app.log 2>&1 &'

            sleep 60  // Give it some time to start

            // Verify that it's running
            sh 'curl http://localhost:3002'
        }
    } finally {
        echo 'Cleaning up...'
    }
}


==================================hello world=====
pipeline {
    agent any

    tools {
        // Install the Maven version configured as "maven-398" and add it to the path.
        maven "maven-398"
    }

    stages {
        stage('Check Maven') {
            steps {
                sh "if ! command -v mvn; then echo 'Maven not found!'; exit 1; fi"
            }
        }

        stage('Build') {
            steps {
                git branch: 'main', url: 'http://localhost:5555/dasher-org/jenkins-hello-world.git'
                sh "mvn clean package -DskipTests=true"
            }
        }

        stage('Unit Test') {
            steps {
                sh "mvn test"
            }
        }
    }
}

--------------
Tool type "maven" does not have an install of "maven-398" configured - did you mean "null"? @ line 5, column 15.
           maven "maven-398"
                 ^

---
Click on Manage Jenkins from the Jenkins dashboard.
Scroll down to System Configuration and click on Tools.
Scroll down to Maven installations and click on Add Maven.
Under Name, enter maven-398. Check Install automatically, and, under Install from Apache, select version 3.9.8.
Click on Apply and then Save.
Go to the lab2-java-hello-world job dashboard and click on Build Now. Wait for some time for the build to complete and you should see it fail.
Click on your build number, and then on Pipeline Overview.

=====================
Steps for archiving JUnit-formatted test result

First, install the JUnit plugin. From the Jenkins dashboard, go to Manage Jenkins->Plugins->Available Plugins and search for JUnit.
Click on Install and then restart Jenkins.
Now, go to Pipeline Syntax->Snippet Generator on the job dashboard, and, under Sample Step, select junit: Archive JUnit-formatted test results. Then enter target/surefire-reports/TEST-*.xml under Test report XMLs and click on Generate Pipeline Script button at the bottom of the page.
You should see an output like this:
junit 'target/surefire-reports/TEST-*.xml'
NOTE: The JUnit syntax may vary, but it will archive the tests. Copy it.

Now, in your terminal, again open the Jenkinsfile again for editing in the jenkins-hello-world repository. To the Unit Test stage, add the command that we copied from the pipeline syntax generator:
stage('Unit Test') {
            steps {
                sh "mvn test"
                junit stdioRetention: '', testResults: 'target/surefire-reports/TEST-*.xml'
            }
        }


-------------------------------
The Jenkinsfile within jenkins-hello-world repo has been updated. Please have a look.

In this task, we will make use of the Build Parameters to replace the Application Port and Sleep time within the Integration testing stage.

Go back to the lab2-java-hello-world project in Jenkins and parameterize it with the below data:

Add a string parameter:

Name: APPLICATION_PORT
Default Value: 6767
Description: Application port on which integration tests should happen
Add a choice parameter:

Name: SLEEP_TIMER
Choices:
5s
10s
20s
40s
60s
Description: Time to sleep before initiating integration tests
Update the Jenkinsfile within jenkins-hello-world repo to replace the sleep time and port number in the Integration testing stage with the above parameters.

Commit the changes to the repository. Then, manually build the lab2-java-hello-world project with parameters.


The build should pass. Check out the logs.



----
stage('Integration Testing') {
    steps {
        sh "sleep ${params.SLEEP_TIMER}"
        sh """ curl -s http://localhost:${params.APPLICATION_PORT}/hello | grep -i "Hello, KodeKloud community!" """
    }
}
