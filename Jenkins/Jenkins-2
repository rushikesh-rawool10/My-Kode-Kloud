pipeline {
    agent any
    tools { nodejs 'NodeJS 16.20.2' }
    stages {
        stage('Print NodeJS and NPM Versions') {
            steps {
                sh 'node -v'
            }
        }
    }
}


=============================================
pipeline {
    agent any
    tools { nodejs 'NodeJS 16.20.2' }
    stages {
        stage('Checkout') {
            steps {
                dir('express-repo') { // Specify a subdirectory for checkout
                    git url: 'https://github.com/expressjs/express.git', branch: 'master'
                }
            }
        }
        stage('Print NodeJS and NPM Versions') {
            steps {
                sh 'node -v'
            }
        }
        stage('Install Dependencies') {
            steps {
                dir('express-repo') {
                    sh 'npm install'
                }
            }
        }
        stage('Run Unit Tests') {
            steps {
                dir('express-repo') {
                    sh 'npm test'
                }
            }
        }
        stage('OWASP Dependency Check') {
            steps {
                dependencyCheck odcInstallation: 'OWASP Dependency Check', 
                               additionalArguments: '--format XML --scan "express-repo/examples/hello-world"'
            }
        }
    }
}
===========================Secret text========================

pipeline {
    agent any
    stages {
        stage('Access MongoDB Connection String') {
            steps {
                withCredentials([string(credentialsId: 'mongo-uri', variable: 'MONGO_URI')]) {
                    // Example command to pass the connection string to your application
                    sh 'echo MongoDB URI: $MONGO_URI'
                }
            }
        }
    }
}

====================================parallel job==================
enclose 2stages in parallel block


pipeline {
    agent any
    stages {
        stage('Parallel Execution') {
            parallel {
                stage('Job 1') {
                    steps {
                        build(job: 'MyFirstJob')
                    }
                }
                stage('Job 2') {
                    steps {
                        build(job: 'MySecondJob')
                    }
                }
            }
        }
    }
}


=================try catch=============

pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                echo 'Starting Build...'
                // Simulate a build process
                sh 'exit 0' // This command simulates a successful build
            }
        }

        stage('Test') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    echo 'Running Tests...'
                    // Simulate a failing test
                    sh 'exit 1' // This command simulates a test failure
                }
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deploying application...'
                // Simulate deployment steps
                sh 'echo Deployment successful'
            }
        }
    }
}

-----Explanation:

Build Stage: Simulates a successful build.
Test Stage: Wraps the test command with catchError, allowing the pipeline to continue even if this stage fails. If an error occurs, it sets the build result to UNSTABLE and the stage result to FAILURE.
Deploy Stage: Always executes, demonstrating that the pipeline continues regardless of errors in the Test stage.

====Jenkins backup===

var/lib/jenkins
it contains all imp plugins, configuration file etc.
you can simply take tar backup of directory and schdeue a cronjob

while restoring stop jenkins to avoid any conflicts
